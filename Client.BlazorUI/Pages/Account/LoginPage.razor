@page "/identity/account/login"

<h3>LoginPage</h3>

<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">

                <DataAnnotationsValidator/>

                <ValidationSummary/>

                <div class="card">
                    <div class="card-header">
                        Login
                    </div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="User.Email"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" @bind="User.Password">
                        </div>
                        <div class="form-group mt-3">
                            <button type="submit" class="btn btn-outline-primary float-end">Login</button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    LoginDto User = new LoginDto();

    async Task HandleLogin()
    {
        var result = await UserAccountService.SignIn(User);

        if (result is not null && result.Flag)
        {
            await DialogService.DisplayDialog(result.Message, " Login Success");
            var customAuthProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

            await customAuthProvider.UpdateAuthenticationState(
                new UserSessionDto{
                    Token = result.Token, 
                    RefreshToken = result.RefreshToken
                });

            NavManager.NavigateTo(AppRoutes.Home, true);
        }
        else
        {
            await DialogService.DisplayDialog(result.Message, "Alert");
        }

    }

}
